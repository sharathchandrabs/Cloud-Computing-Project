import sys
from pyspark import SparkContext
from numpy import *
from numpy.linalg import inv
import math
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

from pandas import DataFrame
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn.cross_validation import train_test_split
from numpy import loadtxt, where

min_max_scaler = preprocessing.MinMaxScaler(feature_range=(-1,1))

sc = SparkContext(appName="LogisticRegression")
yxinputFile = sc.textFile('bank.csv')
yxlines = yxinputFile.map(lambda line: line.split(';'))


(train, test) = yxlines.randomSplit([0.7, 0.3])

input_data_train = np.array(train.collect())
input_data_test = np.array(test.collect())

X_train = input_data_train[:,:-1]
y_train = input_data_train[:,16]

labelencode = LabelEncoder()
X_train[:,1] = labelencode.fit_transform(X_train[:,1])
X_train[:,2] = labelencode.fit_transform(X_train[:,2])
X_train[:,3] = labelencode.fit_transform(X_train[:,3])
X_train[:,4] = labelencode.fit_transform(X_train[:,4])
X_train[:,6] = labelencode.fit_transform(X_train[:,6])
X_train[:,7] = labelencode.fit_transform(X_train[:,7])
X_train[:,8] = labelencode.fit_transform(X_train[:,8])
X_train[:,15] = labelencode.fit_transform(X_train[:,15])
Y_train = labelencode.fit_transform(y_train)

X_train = np.delete(X_train, np.s_[9:11], 1)
X_train = np.array(X_train)
X_train = X_train.astype(np.float)
X_train = min_max_scaler.fit_transform(X_train)
Y_train = np.array(Y_train)

X_test = input_data_test[:,:-1]
y_test = input_data_test[:,16]



X_test[:,1] = labelencode.fit_transform(X_test[:,1])
X_test[:,2] = labelencode.fit_transform(X_test[:,2])
X_test[:,3] = labelencode.fit_transform(X_test[:,3])
X_test[:,4] = labelencode.fit_transform(X_test[:,4])
X_test[:,6] = labelencode.fit_transform(X_test[:,6])
X_test[:,7] = labelencode.fit_transform(X_test[:,7])
X_test[:,8] = labelencode.fit_transform(X_test[:,8])
X_test[:,15] = labelencode.fit_transform(X_test[:,15])
Y_test = labelencode.fit_transform(y_test)

X_test = np.delete(X_test, np.s_[9:11], 1)
X_test = np.array(X_test)
X_test = X_test.astype(np.float)
X_test = min_max_scaler.fit_transform(X_test)
Y_test = np.array(Y_test)



#fit remaining categorical columns and then try one hot encoding 



# creating testing and training set
#X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.33)

# train scikit learn model 
clf = LogisticRegression()
clf.fit(X_train,Y_train)
#print 'score Scikit learn: ', clf.score(X_test,Y_test)


##The sigmoid function adjusts the cost function hypotheses to adjust the algorithm proportionally for worse estimations
def Sigmoid2(z):
	z_matrix = []
	for x in np.nditer(z):
		G_of_Z = float(1.0 / float((1.0 + math.exp(-1.0*x))))
		z_matrix.append(G_of_Z)
	npa = np.matrix(z_matrix, dtype=np.float32)
	return npa.T

def Sigmoid(z):
	G_of_Z = float(1.0 / float((1.0 + math.exp(-1.0*z))))
	return G_of_Z



def Hypothesis(theta, x):
	z = 0
	#print(theta.shape, x.shape)
	theta = np.matrix(theta)
	theta_trans = np.transpose(theta)
	X = np.matrix(x)
	z = np.dot(X,theta_trans)

	return Sigmoid(z)

def Hypothesis2(theta, x):
	z = 0
	theta_trans = np.matrix(theta).T 
	z = np.dot(x, theta_trans)
	return Sigmoid2(z)


def Cost_Function(X,Y,theta,m):
	sumOfErrors = 0
	# print(theta)
	theta = np.array(theta)
	Y = Y.T
	
	print(X.shape)
	for i in range(m):
		xi = X[i]
		print(xi)
		break
		hi = Hypothesis(theta,xi)
		
		if Y[i] == 1:
			error = Y[i] * math.log(hi)
		elif Y[i] == 0:
			error = (1-Y[i]) * math.log(1-hi)
		sumOfErrors += error
	const = -1/m
	J = const * sumOfErrors
	return J

##This function creates the gradient component for each Theta value 
def Cost_Function_Derivative(X,Y,theta,m,alpha):
	sumErrors = 0
	hi = Hypothesis2(theta,X)
	#print (hi.shape)
	#print(Y.shape)
	hi_subtract = np.subtract(hi,Y.T)
	error = np.dot(hi_subtract.T, X)
	m = len(Y)
	constant = float(alpha)/float(m)
	J = np.multiply(constant,error)
	return error

def Gradient_Descent(X,Y,theta,m,alpha):
	constant = alpha/m
	theta = np.matrix(theta)
	CFDerivative = Cost_Function_Derivative(X,Y,theta,m,alpha)
	CFDerivative = np.multiply(constant,CFDerivative)
	new_theta = np.subtract(theta,CFDerivative)
	return new_theta


def Logistic_Regression(X,Y,alpha,theta,num_iters):
	m = len(X)
	X = np.matrix(X)
	Y = np.matrix(Y)
	for x in range(num_iters):
		new_theta = Gradient_Descent(X,Y,theta,m,alpha)
		theta = new_theta
		if x % 100 == 0:
			#here the cost function is used to present the final hypothesis of the model in the same form for each gradient-step iteration
			#print(theta)
			Cost_Function(X,Y,theta,m)
	Declare_Winner(theta)

##This method compares the accuracy of the model generated by the scikit library with the model generated by this implementation
def Declare_Winner(theta):
	score = 0
	winner = ""
	scikit_score = clf.score(X_test,Y_test)
	length = len(X_test)
	for i in range(length):
	 	prediction = round(Hypothesis(X_test[i],theta))
	 	answer = Y_test[i]
	 	if prediction == answer:
	 		score += 1
	my_score = float(score) / float(length)
	print (my_score)


initial_theta = np.zeros(14)  #[0,0] 
alpha = 0.1
iterations = 1000
Logistic_Regression(X_train,Y_train,alpha,initial_theta,iterations)